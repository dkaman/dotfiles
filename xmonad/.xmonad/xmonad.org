#+STARTUP: content
* imports
** core
#+BEGIN_SRC haskell :tangle xmonad.hs
import XMonad
import System.IO
import qualified XMonad.StackSet as W
#+END_SRC
** hooks
#+BEGIN_SRC haskell :tangle xmonad.hs
import XMonad.Hooks.DynamicLog
import XMonad.Hooks.ManageDocks
#+END_SRC
** util
#+BEGIN_SRC haskell :tangle xmonad.hs
import XMonad.Util.Run(spawnPipe)
import XMonad.Util.EZConfig
import XMonad.Util.NamedScratchpad
#+END_SRC
** actions
#+BEGIN_SRC haskell :tangle xmonad.hs
import qualified XMonad.Actions.Search as S
import XMonad.Actions.CycleWS
import XMonad.Actions.WindowBringer
import XMonad.Actions.WindowGo
import XMonad.Actions.DynamicWorkspaces
import XMonad.Actions.DynamicWorkspaceGroups
#+END_SRC
** layout
#+BEGIN_SRC haskell :tangle xmonad.hs
import XMonad.Layout.Spacing
import XMonad.Layout.NoBorders
#+END_SRC
** prompt
#+BEGIN_SRC haskell :tangle xmonad.hs
import XMonad.Prompt
#+END_SRC
** control
#+BEGIN_SRC haskell :tangle xmonad.hs
import Control.Monad
#+END_SRC
* Boilerplate
** default programs
#+BEGIN_SRC haskell :tangle xmonad.hs
myTerminal = "xterm"
myBrowser = "uzbl-tabbed"
#+END_SRC
** colors
#+BEGIN_SRC haskell :tangle xmonad.hs
myHighlight = "#00FF00"
myLowlight = "#00008A"
myEmpty = "#999999"
myVisible = "#FFFF00"
myForeground = "#FFFFFF"
myBackground = "#000000"
myAccent = "#85E0FF"
#+END_SRC
** etc.
#+BEGIN_SRC haskell :tangle xmonad.hs
myBar = "xmobar /home/dallas/.xmobarrc"
myBorderWidth = 2
myWorkspaces = ["1" ,"2" ,"3" ,"4" ,"5"]
#+END_SRC
* main
#+BEGIN_SRC haskell :tangle xmonad.hs
main = do
  h <- spawnPipe myBar -- used in logHook
    xmonad $ defaultConfig
        { terminal = myTerminal
        , workspaces = myWorkspaces
        , focusedBorderColor = myAccent
        , borderWidth = myBorderWidth
        , manageHook =  myManageHook
        , layoutHook = avoidStruts $ smartBorders $ spacing 2 $ layoutHook defaultConfig
        , startupHook = myStartup
        , logHook = myLogHook h
        , modMask = mod4Mask
        } `additionalKeysP` addedKeys
#+END_SRC
* my functions
** scratchpads
#+BEGIN_SRC haskell :tangle xmonad.hs
myScratchpads = [ NS "alsamixer" "xterm -e alsamixer" (title =? "alsamixer") (customFloating $ W.RationalRect 0.6 0.1 0.35 0.5)
                , NS "xterm" "xterm -name scratchterm" (title =? "scratchterm") (customFloating $ W.RationalRect 0.05 0.8 0.9 0.15)
                ]

toggleSkip :: [WorkspaceId] -> X ()
toggleSkip skips = do
    hs <- gets (flip skipTags skips . W.hidden . windowset)
    unless (null hs) (windows . W.view . W.tag $ head hs)
#+END_SRC
** startup
#+BEGIN_SRC haskell :tangle xmonad.hs
myStartup = do
spawn "emacs --daemon"
spawn "xmodmap ~/.xmodmap"
spawn "xscreensaver -no-splash &"
spawn "xterm"
#+END_SRC
** key bindings
#+BEGIN_SRC haskell :tangle xmonad.hs
addedKeys = [("M4-r", spawn "dmenu_run")
,("M4-n", nextWS)
,("M4-p", prevWS)
,("M4-`", gotoMenu)
,("M4-<Tab>", toggleSkip ["NSP"])
,("M4-s M4-l", spawn "xscreensaver-command --lock")
,("M4-s M4-s", spawn "scrot ~/Documents/screenshots/%Y-%m-%d-%T-screenshot.png")
             ,("M4-<F1>", runOrRaise "google-chrome" (className =? "Google-chrome"))
             ,("M4-<F2>", runOrRaise "emacs" (className =? "Emacs"))
             ,("M4-<F3>", runOrRaise "nautilus" (className =? "Nautilus"))
             ,("M4-<F4>", runOrRaise "vlc" (className =? "vlc"))
             ,("M4-<F12>", namedScratchpadAction myScratchpads "alsamixer")
             ,("M4-S-<F12>", spawn "amixer -D pulse set Master toggle")
             ,("M4-<Return>", namedScratchpadAction myScratchpads "xterm")
,("M4-S-<Return>", spawn "xterm -e /home/dallas/scripts/screen.sh")
]
-- Search functionality (thanks tylevad on Github!)
++ [("M4-s " ++ k, S.promptSearchBrowser myXPConfig myBrowser f) | (k,f) <- searchEngines]
   where searchEngines = [("g", S.google)
       ,("d", S.searchEngine "DuckDuckGo" "https://duckduckgo.com/?q=")
       ,("w", S.searchEngine "Wikipedia" "http://en.wikipedia.org/wiki/Special:Search?search=")
       ,("y", S.searchEngine "YouTube" "https://www.youtube.com/results?search_query=")
       ,("a", S.searchEngine "ArchWiki" "http://wiki.archlinux.org/index.php/Special:Search?search=")
       ]
#+END_SRC
** hooks
*** manage hook
#+BEGIN_SRC haskell :tangle xmonad.hs
myManageHook = composeAll [ manageDocks
                          , namedScratchpadManageHook myScratchpads
                          ]
#+END_SRC
*** log hook
#+BEGIN_SRC haskell :tangle xmonad.hs
myLogHook h = (dynamicLogWithPP . namedScratchpadFilterOutWorkspacePP $ myPP h)

myPP h = xmobarPP
  { ppCurrent         = xmobarColor myEmpty "" . wrap "{" "}" . xmobarColor myHighlight ""
  , ppVisible         = xmobarColor myEmpty "" . wrap "[" "]" . xmobarColor myVisible ""
  , ppHidden          = xmobarColor myForeground ""
  , ppHiddenNoWindows = xmobarColor myEmpty ""
  , ppTitle           = xmobarColor myForeground "" . shorten 100
  , ppLayout          = xmobarColor myAccent ""
  , ppSep             = " <fc=" ++ myLowlight ++ ">|</fc> "
  , ppWsSep           = " "
  , ppOutput          = hPutStrLn h
  }

myXPConfig = defaultXPConfig
  { fgColor = myForeground
  , bgColor = myBackground
  , bgHLight = myBackground
  , fgHLight = myAccent
  , borderColor = myAccent
  , position = Bottom
  , historySize = 0
  , height = 16
  }
#+END_SRC
*** layout hook
#+BEGIN_SRC haskell :tangle xmonad.hs
#+END_SRC
